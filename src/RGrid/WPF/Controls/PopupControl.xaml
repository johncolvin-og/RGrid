<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
  xmlns:u="clr-namespace:RGrid.WPF"
  xmlns:c="clr-namespace:RGrid.Controls"
>
  <ResourceDictionary.MergedDictionaries>
    <ResourceDictionary Source="pack://application:,,,/RGrid;component/Themes/Colors.xaml"/>
  </ResourceDictionary.MergedDictionaries>
  <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

  <Style x:Key="PopupContainerStyleBase" TargetType="Border">
    <Setter Property="BorderBrush" Value="DarkGray"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="Background" Value="{StaticResource CommonBackground}"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="MinWidth" Value="100"/>
    <Setter Property="u:Behavior.EatMouseDown" Value="True"/>
  </Style>

  <Style TargetType="c:PopupControl">
    <Setter Property="PopupContainerStyle" Value="{StaticResource PopupContainerStyleBase}"/>
    <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
    <Setter Property="BorderThickness" Value="1"/>
    <Setter Property="HorizontalAlignment" Value="Stretch"/>
    <Setter Property="VerticalAlignment" Value="Stretch"/>
    <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
    <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="c:PopupControl">
          <Button x:Name="button"
                  BorderBrush="{TemplateBinding BorderBrush}"
                  BorderThickness="{TemplateBinding BorderThickness}"
                  Background="{TemplateBinding Background}"
                  HorizontalAlignment="{TemplateBinding HorizontalAlignment}"
                  VerticalAlignment="{TemplateBinding VerticalAlignment}"
                  HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                  VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                  Padding="{TemplateBinding Padding}"
                  Command="{TemplateBinding TogglePopupCommand}"
                  Focusable="False">
            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
              <Grid.ColumnDefinitions>
                <ColumnDefinition/>
                <ColumnDefinition Width="Auto"/>
              </Grid.ColumnDefinitions>
              <ContentPresenter ContentSource="Header" HorizontalAlignment="Center" VerticalAlignment="Center"/>
              <Path x:Name="arrow" Grid.Column="1" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="6,0" Data="M0,0L3.5,3.5 0,7" SnapsToDevicePixels="False" Stroke="#FF333333" StrokeThickness="2"
                    Visibility="{Binding ShowExpanderArrow, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}"/>
              <Popup x:Name="popup"
                     Placement="{TemplateBinding PopupPlacement}"
                     IsOpen="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}}"
                     StaysOpen="False">
                <Border Style="{Binding PopupContainerStyle, RelativeSource={RelativeSource TemplatedParent}, FallbackValue={StaticResource PopupContainerStyleBase}}">
                  <ContentPresenter Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentTemplateSelector}"/>
                </Border>
              </Popup>
            </Grid>
          </Button>
          <ControlTemplate.Triggers>
            <Trigger Property="PopupPlacement" Value="Left">
              <Setter Property="Data" TargetName="arrow" Value="M4.5,-2L1,1.5 4.5,5"/>
            </Trigger>
            <Trigger Property="PopupPlacement" Value="Top">
              <Setter Property="Data" TargetName="arrow" Value="M0,3.5 L3.5,0 7,3.5"/>
            </Trigger>
            <Trigger Property="PopupPlacement" Value="Bottom">
              <Setter Property="Data" TargetName="arrow" Value="M0,0L3.5,3.5 7,0"/>
            </Trigger>
            <Trigger Property="IsOpen" Value="True">
              <Setter Property="RenderTransform" TargetName="arrow" Value="{Binding IsOpenTransform, RelativeSource={RelativeSource TemplatedParent}}"/>
            </Trigger>
          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>